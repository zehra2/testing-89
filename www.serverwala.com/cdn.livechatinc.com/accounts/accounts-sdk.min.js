! function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = e || self).AccountsSDK = t()
}(this, function() {
    "use strict";
    var u = function(e, t) {
        if (null == e) throw new TypeError("Cannot convert undefined or null to object");
        for (var n = Object(e), o = 1; o < arguments.length; o++) {
            var i = arguments[o];
            if (null != i)
                for (var s in i) Object.prototype.hasOwnProperty.call(i, s) && (n[s] = i[s])
        }
        return n
    };

    function i() {
        return (i = Object.assign || function(e) {
            for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o])
            }
            return e
        }).apply(this, arguments)
    }
    var o = new function() {
            this.submit = function(e, t) {
                (t = u({}, t)).headers = t.headers || [], t.success = t.success || function() {}, t.error = t.error || function() {}, t.method = t.method || "POST";
                var n = new XMLHttpRequest;
                n.open(t.method, e, !0), Object.keys(t.headers).forEach(function(e) {
                    return n.setRequestHeader(e, t.headers[e])
                }), n.onreadystatechange = function() {
                    return 4 === n.readyState && (n.status < 200 || 299 < n.status ? t.error(n.responseText, n.status) : t.success(n.responseText, n.status), !0)
                }, n.send(t.postData)
            }, this.get = function(e, t) {
                var n = new XMLHttpRequest;
                n.open("GET", e, !0), !0 === t.withCredentials && (n.withCredentials = !0), Object.keys(t.headers).forEach(function(e) {
                    return n.setRequestHeader(e, t.headers[e])
                }), n.onreadystatechange = function() {
                    return n.readyState === XMLHttpRequest.DONE && (200 === n.status ? t.success(n.responseText, n.status) : t.error(n.responseText, n.status), !0)
                }, n.send(t.postData)
            }
        },
        s = new(function(o) {
            var e, t;

            function n() {
                for (var i, e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
                return (i = o.call.apply(o, [this].concat(t)) || this).getInfoByCode = function(e, t) {
                    void 0 === t && (t = {}), i.get("/info?code=" + e + "&type=code", t)
                }, i.getInfoByAccessToken = function(e, t) {
                    void 0 === t && (t = {});
                    var n = t;
                    n.headers = u({
                        Authorization: "Bearer " + e
                    }, n.headers), i.get("/info", n)
                }, i.signOut = function(e, t, n) {
                    void 0 === n && (n = {});
                    var o = n;
                    o.headers = u({
                        Authorization: "Bearer " + e
                    }, o.headers), i.delete(!0 !== t ? "/v2/sessions/my" : "/v2/sessions", {}, o)
                }, i
            }
            return (e = n).prototype = Object.create((t = o).prototype), (e.prototype.constructor = e).__proto__ = t, n
        }(function() {
            function e(e, t, n) {
                var c = this;
                void 0 === t && (t = {}), void 0 === n && (n = {}), this.endpoint = void 0, this.headers = void 0, this.options = void 0, this.promisify = function(e) {
                    return null == e.success && null == e.error ? new Promise(function(n, o) {
                        e.success = function(e, t) {
                            n({
                                data: e,
                                statusCode: t
                            })
                        }, e.error = function(e, t) {
                            o({
                                data: e,
                                statusCode: t
                            })
                        }
                    }) : null
                }, this.URL = function(e) {
                    return "function" == typeof c.endpoint ? c.endpoint() + e : c.endpoint + e
                }, this.finalOptions = function(n, o, i, s) {
                    var r, a, e = JSON.stringify(o),
                        t = u({}, i);
                    return t.postData = e, t.headers = u(t.headers || {}, c.headers), t.success && (t.success = (r = t.success, function(t, e) {
                        try {
                            t = JSON.parse(t)
                        } catch (e) {
                            t = {}
                        }
                        r(t, e)
                    })), t.error && (t.error = (a = t.error, function(t, e) {
                        try {
                            t = JSON.parse(t)
                        } catch (e) {
                            t = {}
                        }
                        if ("wrong region" === t.error || 421 === e) return c.options.onIncorrectRegion && c.options.onIncorrectRegion(t.region), void c[s](n, o, i);
                        a(t, e)
                    })), t
                }, this.get = function(e, t) {
                    o.get(c.URL(e), c.finalOptions(e, {}, t, "get"))
                }, this.post = function(e, t, n) {
                    o.submit(c.URL(e), c.finalOptions(e, t, n, "post"))
                }, this.put = function(e, t, n) {
                    n.method = "PUT", o.submit(c.URL(e), c.finalOptions(e, t, n, "put"))
                }, this.delete = function(e, t, n) {
                    n.method = "DELETE", o.submit(c.URL(e), c.finalOptions(e, t, n, "delete"))
                }, this.setDefaults = function(e) {
                    return (e = e || {}).headers = e.headers || {}, e
                }, this.endpoint = e, this.headers = t, this.options = n
            }
            return e.prototype.setEndpoint = function(e) {
                this.endpoint = e
            }, e
        }()))("https://accounts.livechatinc.com"),
        t = new(function() {
            function e() {}
            var t = e.prototype;
            return t.set = function(e, t, n) {
                void 0 === n && (n = null);
                var o = {
                    value: t,
                    expiresIn: (new Date).getTime() + 1e3 * n
                };
                try {
                    localStorage.setItem(e, JSON.stringify(o))
                } catch (e) {}
            }, t.get = function(t) {
                var e;
                try {
                    e = JSON.parse(localStorage.getItem(t))
                } catch (e) {
                    return localStorage.getItem(t)
                }
                if (null !== e) {
                    if (null === e.expiresIn || e.expiresIn >= (new Date).getTime()) return e.value;
                    localStorage.removeItem(t)
                }
                return null
            }, t.remove = function(e) {
                try {
                    localStorage.removeItem(e)
                } catch (e) {}
            }, e
        }());

    function r(t) {
        return 0 === Object.keys(t).length ? "" : "?" + Object.keys(t).map(function(e) {
            return encodeURIComponent(e) + "=" + encodeURIComponent(t[e])
        }).join("&")
    }
    var n = {
            "popup-window-name": "livechat-login-popup",
            "console-url": "https://developers.livechatinc.com/console/",
            "login-button-class": "livechat-login-button",
            "cache-prefix": "livechat_cache",
            "text-button-product-name": "Live<span>Chat</span>"
        },
        c = function(e) {
            return n[e]
        },
        d = "https://accounts.livechatinc.com",
        p = [],
        a = function(e) {
            var a = this;
            this._options = {
                client_id: null,
                response_type: "token",
                linkLabel: null,
                login: "auto",
                prompt: "",
                onIdentityFetched: function() {},
                onSignedOut: function() {},
                queryStringParams: {
                    utm_source: "accounts.livechatinc.com",
                    utm_medium: "accounts-sdk"
                },
                popupRoute: ""
            }, this._postMessageUniqueId = null, this._listenerInited = !1, this._tid = !1, this._lastIdentityError = null, this._lastIdentityData = null, this.updateOptions = function(e) {
                a._options = u(a._options, e), e.backendAddress && (d = e.backendAddress), s.setEndpoint(d), "popup" !== a._options.login && "semiauto" !== a._options.login || (a._options.popupRoute = "signin")
            }, this.openPopup = function(e) {
                e && e.preventDefault && e.preventDefault();
                var t = window.screen.width / 2 - 250,
                    n = window.screen.height / 2 - 325,
                    o = a._getCurrentPath();
                a._startListening(), window.open(d + "/" + a._options.popupRoute + r(i({
                    client_id: a._options.client_id,
                    state: a._postMessageUniqueId,
                    response_type: a._options.response_type,
                    redirect_uri: o,
                    flow: "button",
                    prompt: a._options.prompt
                }, a._options.queryStringParams)), c("popup-window-name"), "resizable,scrollbars,width=500,height=650,left=" + t + ",top=" + n)
            }, this.signOut = function(t) {
                void 0 === t && (t = function() {});
                var e = a._getCachedData();
                null != e && null != e.access_token ? s.signOut(e.access_token, !1, {
                    success: function() {
                        t()
                    },
                    error: function(e) {
                        t("insufficient_scope" === e.error ? {
                            oauth_exception: e.error,
                            description: e.error_description
                        } : e.oauth_exception ? e : {
                            oauth_exception: "server_error"
                        })
                    }
                }) : t({
                    identity_exception: "unauthorized"
                })
            }, this.displayButtons = function(e) {
                if (void 0 === e && (e = {}), !0 !== e.internalCall && a._lastIdentityError && "invalid_request" === a._lastIdentityError.oauth_exception) a._displayError(["Button could not be displayed. Probably you are running this script on a domain that is not whitelisted in your app's settings.", "Visit developers console to update your app's domain list: " + c("console-url")]);
                else {
                    var t = document.getElementsByClassName(c("login-button-class"));
                    if (0 < t.length) {
                        var n = document.createElement("link");
                        n.id = c("login-button-class") + "-font", n.rel = "stylesheet", n.href = "//fonts.googleapis.com/css?family=Lato:300,400,700,900", document.head.appendChild(n), document.head.insertAdjacentHTML("beforeend", "<style>." + c("login-button-class") + ' a {color: #5a6976;display: inline-block;font-size: 16px;line-height: 1.5;font-family: "Lato", sans-serif;font-weight: 400;text-decoration: none;border: 1px solid #ddd;border-radius: 3px;padding: 8px 24px 9px}.' + c("login-button-class") + " a:hover {border-color: #888;color: #5a6976}." + c("login-button-class") + " span {color: #f56e21</style>");
                        for (var o = 0, i = t.length; o < i; o += 1) {
                            var s = t[o];
                            if ("1" !== s.getAttribute("data-inited")) {
                                s.setAttribute("data-inited", "1");
                                var r = document.createElement("a");
                                r.href = "", r.onclick = a.openPopup, a._options.linkLabel ? r.text = a._options.linkLabel : r.innerHTML = "Sign in with <strong>" + c("text-button-product-name") + "</strong>", s.appendChild(r)
                            }
                        }
                    }
                }
            }, this._displayError = function(e) {
                if (window.console && window.console.warn) {
                    var t = e;
                    e instanceof Array || (t = [e]), t.forEach(function(e) {
                        return window.console.warn("[accountsSdk] " + e)
                    })
                }
            }, this._returnSuccessResponse = function(t, n) {
                void 0 === n && (n = {});
                var o = {};
                t.code ? (o.code = t.code, s.getInfoByCode(t.code, {
                    success: function(e) {
                        o.client_id = e.client_id, o.entity_id = e.entity_id, o.license = e.license_id, o.expires_in = e.expires_in, o.scopes = e.scope ? e.scope.split(",") : [], a._onIdentityFetched(null, o)
                    },
                    error: function(e) {
                        n.fromIframeCache ? (a._removeCachedData(), a._buildIframe()) : a._onIdentityFetched(e, null)
                    }
                })) : (o.access_token = t.access_token, s.getInfoByAccessToken(t.access_token, {
                    success: function(e) {
                        o.client_id = e.client_id, o.entity_id = e.entity_id, o.license = e.license_id, o.expires_in = e.expires_in, o.scopes = e.scope ? e.scope.split(",") : [], a._cacheData({
                            access_token: t.access_token,
                            expires_in: e.expires_in
                        }), a._onIdentityFetched(null, o)
                    },
                    error: function(e) {
                        n.fromIframeCache ? (a._removeCachedData(), a._buildIframe()) : a._onIdentityFetched(e, null)
                    }
                }))
            }, this._removeIframe = function() {
                var e = document.getElementById(a._getIframeId());
                e && e.parentNode && e.parentNode.removeChild(e), a._stopListening()
            }, this._parseJwt = function(e) {
                var t = e.split(".")[1].replace(/-/g, "+").replace(/_/g, "/"),
                    n = decodeURIComponent(atob(t).split("").map(function(e) {
                        return "%" + ("00" + e.charCodeAt(0).toString(16)).slice(-2)
                    }).join(""));
                return JSON.parse(n)
            }, this._checkPostMessageUniqueId = function(e) {
                if (e === a._postMessageUniqueId) return !0;
                try {
                    return a._parseJwt(e).state === a._postMessageUniqueId
                } catch (e) {
                    return !1
                }
            }, this._receiveMessage = function(e) {
                for (var t = !1, n = 0; n < p.length; n += 1)
                    if (e.origin === p[n]) {
                        t = !0;
                        break
                    }!1 !== t && e.data && e.data.state && a._checkPostMessageUniqueId(e.data.state) && (clearTimeout(a._tid), a._removeIframe(), e.data.error ? a._parseError(e.data.error) : !0 === e.data.signed_out ? a._options.onSignedOut() : e.data.data && a._returnSuccessResponse(e.data.data))
            }, this._parseError = function(e) {
                a._onIdentityFetched(e, null), a._lastIdentityError && ("invalid_request" === a._lastIdentityError.oauth_exception ? a._displayError(["Authorization process returned 'invalid_request' error.", "Probably you are running this script on a domain that is not whitelisted in your app's settings.", "Visit developers console to update your app's domain list: " + c("console-url")]) : "access_denied" === a._lastIdentityError.oauth_exception ? a._displayError(["Authorization process returned 'access_denied' error.", "Probably this application is installed on a different account and you do not have access to it."]) : "invalid_request" === a._lastIdentityError.identity_exception && a._displayError(["Authentication process returned 'invalid_request' error.", "You may be loading accountsSdk on a domain that is not whitelisted."]))
            }, this._onIdentityFetched = function(e, t) {
                a._lastIdentityError = e, a._lastIdentityData = t, a.displayButtons({
                    internalCall: !0
                }), a._options.onIdentityFetched(e, t)
            }, this._buildIframe = function(e) {
                void 0 === e && (e = ""), a._startListening({
                    timeout: 5e3
                });
                var t = document.createElement("iframe");
                t.setAttribute("src", d + "/" + e + r(i({
                    client_id: a._options.client_id,
                    state: a._postMessageUniqueId,
                    response_type: a._options.response_type,
                    redirect_uri: a._getCurrentPath(),
                    flow: "button",
                    prompt: a._options.prompt
                }, a._options.queryStringParams))), t.setAttribute("id", a._getIframeId()), t.style.width = "1px", t.style.height = "1px", t.style.position = "fixed", t.style.top = "0", t.style.right = "0", t.style.opacity = "0", t.style.visibility = "none", document.body.appendChild(t)
            }, this._getCurrentPath = function() {
                return window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "") + window.location.pathname
            }, this._getCacheKey = function() {
                return c("cache-prefix") + "." + a._options.client_id + "." + a._options.response_type
            }, this._cacheData = function(e) {
                t.set(a._getCacheKey(), e, e.expires_in)
            }, this._getCachedData = function() {
                return t.get(a._getCacheKey())
            }, this._removeCachedData = function() {
                return t.remove(a._getCacheKey())
            }, this._getIframeId = function() {
                return c("login-button-class") + "-iframe." + a._options.client_id + "." + a._options.response_type
            }, this._startListening = function(e) {
                void 0 === e && (e = {}), a._listenerInited || (e.timeout && (a._tid = setTimeout(function() {
                    a._parseError({
                        identity_exception: "invalid_request"
                    })
                }, e.timeout)), a._listenerInited = !0, window.addEventListener("message", a._receiveMessage, !1))
            }, this._stopListening = function() {
                a._listenerInited = !1, window.removeEventListener("message", a._receiveMessage, !1)
            }, this.initSDK = function() {
                if (a._options.client_id) {
                    var e = a._getCachedData();
                    e ? a._returnSuccessResponse(e, {
                        fromIframeCache: !0
                    }) : "auto" === a._options.login || "semiauto" === a._options.login ? a._buildIframe() : a.displayButtons()
                } else window.console && window.console.warn && console.error('[accountsSdk] Required "client_id" param is missing in init() method.')
            }, this._postMessageUniqueId = Math.random().toString(36).substr(2, 9), this.updateOptions(e), p.push(d.replace(/livechatinc\.com$/, "livechat.com")), p.push(d.replace(/livechat\.com$/, "livechatinc.com"))
        };
    return {
        init: function(e) {
            var t = new a(e);
            return t.initSDK(), t
        }
    }
});